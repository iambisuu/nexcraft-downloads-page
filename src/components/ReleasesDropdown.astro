---
import { getReleases } from "../lib/db";

interface Release {
  id: number;
  platform_type: "Windows" | "Mac" | "Linux";
  version: string;
  metadata?: string;
  release_date: string;
  download_url: string;
}

// Fetch releases once at build time
const releases: Release[] = await getReleases();

// Group releases by platform
const platforms = ["Windows", "Mac", "Linux"];
const releasesByPlatform = platforms.map(platform => ({
  platform,
  releases: releases.filter(release => release.platform_type === platform)
}));

function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" });
}
---

<div id="download-container" class="grid px-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-6 items-end">
    {releasesByPlatform.map(({ platform, releases }, index) => (
      <div
        id={`box-${platform}`}
        class={`p-6 rounded-lg flex flex-col justify-between bg-gradient-to-b transition-all hover:scale-105 ${
          index === 1 ? "from-black to-black sm:min-h-[450px]" : "from-gray-800 to-gray-700"
        }`}
      >
        <!-- Platform Header -->
        <div class="flex flex-col items-center">
          <div class="w-14 h-14 flex items-center justify-center rounded-full bg-gray-700 mb-4">
            <div class="w-8 h-8 flex-shrink-0">
              <img
                src={`/${platform.toLowerCase()}.png`}
                alt={`${platform} icon`}
                class="w-full h-full object-contain"
              />
            </div>
          </div>
          <h2 class="text-3xl font-bold text-white">{platform}</h2>
          <p class="text-gray-300 text-center mt-1">
            {platform === "Mac"
              ? "Most popular for creatives"
              : platform === "Windows"
              ? "Perfect for gamers and developers"
              : "Best for stability and customization"}
          </p>
        </div>
  
        <!-- Latest Version and Metadata -->
        <div class="bg-gray-900 text-gray-300 rounded-lg p-4 mt-4">
          <p class="text-sm">
            <strong>Latest Version:</strong>{" "}
            {releases.length > 0 ? releases[0].version : "Not available"}
          </p>
          <p class="text-sm mt-2">
            <strong>Release Date:</strong>{" "}
            {releases.length > 0 ? formatDate(releases[0].release_date) : "Not available"}
          </p>
          <p class="text-xs text-gray-500 mt-2">
            {releases.length > 0 ? releases[0].metadata : "Metadata not provided for this release."}
          </p>
        </div>
  
        <!-- Download Button -->
        <button
          id={`download-button-${platform}`}
          class="mt-6 w-full py-3 bg-yellow-400 text-black font-bold rounded-lg transition-transform transform hover:scale-105"
        >
          Download Now 
        </button>
      </div>
    ))}
  </div>
  
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const releaseDataElement = document.getElementById("release-data");
      if (!releaseDataElement) return;
      
      const releases = JSON.parse(releaseDataElement.textContent || "[]");
  
      function getUserOS() {
        const platform = navigator.platform.toLowerCase();
        if (platform.includes("win")) return "Windows";
        if (platform.includes("mac")) return "Mac";
        if (platform.includes("linux")) return "Linux";
        return null;
      }
  
      const userOS = getUserOS();
      if (userOS) {
        const osBox = document.getElementById(`box-${userOS}`);
        if (osBox) {
          osBox.classList.add("sm:translate-y-[-20px]");
        }
      }
  
      ["Windows", "Mac", "Linux"].forEach(platform => {
        const downloadButton = document.getElementById(`download-button-${platform}`);
        if (!downloadButton) return;
        const latestRelease = releases.find(
          (r: { platform_type: string; download_url: string; }) => r.platform_type === platform
        );
        if (latestRelease) {
          downloadButton.onclick = () => {
            window.location.href = latestRelease.download_url;
          };
        }
      });
    });
  </script>
  
  
  <!-- Store releases as JSON for client-side updates -->
  <pre id="release-data" hidden>{JSON.stringify(releases)}</pre>